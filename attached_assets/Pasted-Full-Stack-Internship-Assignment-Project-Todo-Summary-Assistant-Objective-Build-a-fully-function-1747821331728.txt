Full Stack Internship Assignment
Project: "Todo Summary Assistant"
Objective: Build a fully functional full-stack application where a user can:
●
Create and manage personal to-do items.
●
Click a button to summarize all pending to-dos using an actual LLM (e.g., OpenAI,
Anthropic, Cohere, Mistral, etc.).
●
Send the generated summary to a Slack channel.
Requirements:
Frontend
Use React to build the UI.
Functionality:
Add, edit, delete to-do items.
View list of current to-dos.
A button to generate and send the summary.
Show a success/failure message for the Slack operation.
Backend
Use Java (Spring Boot) or Node.js (Express).
The backend should expose the following endpoints:
GET /todos – Fetch all todos.
POST /todos – Add a new todo.
DELETE /todos/:id – Delete a todo.
POST /summarize – Summarize todos and send to Slack.
LLM Integration
Integrate with a real LLM API (like OpenAI, Cohere, or similar with free-tier
access).
Use the LLM to summarize the to-do list meaningfully — don’t simulate or mock
this.
Slack Integration
Use Slack Incoming Webhooks to post the summary to a Slack channel.
Include instructions for how to configure this in your README.
Hosting & Database
Use either:
Supabase for backend/database hosting.
Firebase for hosting or authentication (optional).
You may use a free-tier PostgreSQL/Supabase DB/Firebase Firestore to store the
to-dos.
Stack Flexibility
You are free to choose your own stack and tools (within the boundaries above) as long as:
You use React for the frontend.
The backend is built in Java or Node.js.
You integrate with a real LLM API and Slack.
The core functionality and flow are implemented as described.
This assignment is about solving the problem using working integrations. Creativity and
implementation details are up to you.
Deliverables
●
A public GitHub repository with:
Source code (frontend and backend).
.env.example with required environment variables.
A README containing:
Setup instructions
Slack and LLM setup guidance
Your design/architecture decisions
●
(Optional but appreciated) Deployed URL (e.g., Vercel, Netlify, Firebase Hosting,
etc.)