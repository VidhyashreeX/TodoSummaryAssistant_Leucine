import axios from "axios";

// Using Slack webhook instead of Bot Token
const SLACK_WEBHOOK_URL = process.env.SLACK_WEBHOOK_URL || "SLACK_WEBHOOK";

if (!SLACK_WEBHOOK_URL || SLACK_WEBHOOK_URL === "SLACK_WEBHOOK") {
  console.warn("SLACK_WEBHOOK_URL environment variable is not properly set. Slack integration will use a fallback URL.");
}

/**
 * Sends a todo summary to Slack using a webhook
 * @param summary Summary text to send to Slack
 * @returns Promise resolving to the success status
 */
export async function sendSummaryToSlack(summary: string): Promise<{ success: boolean; message: string }> {
  if (!SLACK_WEBHOOK_URL || SLACK_WEBHOOK_URL === "SLACK_WEBHOOK") {
    return { 
      success: false, 
      message: "Slack webhook URL is not properly configured."
    };
  }

  try {
    const currentDate = new Date().toLocaleString();

    // Prepare the payload for Slack webhook
    const payload = {
      text: `Todo Summary (${currentDate})`,
      blocks: [
        {
          type: "header",
          text: {
            type: "plain_text",
            text: `Todo Summary (${currentDate})`,
            emoji: true
          }
        },
        {
          type: "section",
          text: {
            type: "mrkdwn",
            text: summary
          }
        },
        {
          type: "context",
          elements: [
            {
              type: "mrkdwn",
              text: "Generated by Todo Summary Assistant"
            }
          ]
        }
      ]
    };

    // Send to Slack using webhook
    const response = await axios.post(SLACK_WEBHOOK_URL, payload, {
      headers: {
        'Content-Type': 'application/json'
      }
    });

    if (response.status === 200) {
      return { success: true, message: "Summary sent to Slack successfully" };
    } else {
      return { 
        success: false, 
        message: `Failed to send to Slack: HTTP status ${response.status}` 
      };
    }
  } catch (error: any) {
    console.error("Error sending to Slack:", error);
    return { 
      success: false, 
      message: `Error sending to Slack: ${error.message}` 
    };
  }
}
