# Todo Summary Assistant - Setup Guide

This guide will walk you through setting up and running the Todo Summary Assistant application on your local system.

## Prerequisites

Before you begin, make sure you have the following installed:

- Node.js (v18 or higher)
- npm (usually comes with Node.js)
- Git (for cloning the repository)

## Step 1: Clone the Repository

```bash
git clone https://github.com/yourusername/todo-summary-assistant.git
cd todo-summary-assistant
```

## Step 2: Install Dependencies

Install all required dependencies for the project:

```bash
npm install
```

This will install all the packages listed in package.json, including:

- Frontend: React, TypeScript, TailwindCSS, Shadcn/UI
- Backend: Express, Node.js
- External APIs: Axios for API calls

## Step 3: Set Up Environment Variables

Create a `.env` file in the root directory with the following variables:

```
# Required for Slack integration
SLACK_WEBHOOK_URL=your_slack_webhook_url

# Required for LLM integration (if using OpenAI)
OPENAI_API_KEY=your_openai_api_key
```

### Getting a Slack Webhook URL

1. Go to https://api.slack.com/apps
2. Create a new app for your workspace
3. Navigate to "Incoming Webhooks" and activate them
4. Add a new webhook to your workspace
5. Copy the webhook URL and paste it into your .env file

### Getting an OpenAI API Key (Optional)

1. Go to https://platform.openai.com/
2. Sign up or log in to your account
3. Navigate to API keys section
4. Create a new API key
5. Copy the key and paste it into your .env file

## Step 4: Start the Development Server

Run the development server:

```bash
npm run dev
```

This will start both the backend server and frontend development server. The application will be available at:

http://localhost:5000

## Step 5: Build for Production (Optional)

If you want to build the application for production:

```bash
npm run build
```

To start the production server:

```bash
npm run start
```

## Troubleshooting

### Common Issues

1. **Port conflicts**: If port 5000 is already in use, you can change it by modifying the port in `server/index.ts`.

2. **Dependency issues**: If you encounter dependency-related errors, try:
   ```bash
   npm clean-install
   ```

3. **Environment variable problems**: Make sure your .env file is in the root directory and contains the correct variables.

4. **API rate limiting**: If you're hitting rate limits with external APIs, consider implementing caching or throttling mechanisms.

## Project Structure

- `client/`: Frontend React application
- `server/`: Backend Express server
- `shared/`: Shared types and schemas
- `components.json`: Shadcn UI configuration

## Development Workflow

1. Make changes to the code
2. The development server will automatically reload
3. For backend changes, check the console for any errors
4. For frontend changes, check the browser console

## Testing the Application

1. Add some tasks using the "Add Task" button
2. Generate a summary using the "Generate Summary" button
3. Send the summary to Slack using the "Send to Slack" button

## Additional Information

- The application uses in-memory storage by default
- To implement a persistent database, you would need to modify the `server/storage.ts` file
- Look at the README.md for more detailed information about the project architecture